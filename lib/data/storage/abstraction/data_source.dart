import 'package:MarkMyProgress/data/storage/abstraction/storable.dart';

abstract class DataSource<Key, Value extends Storable<Key>> {
  bool get isOpen;

  Stream<Value> getAll();

  Stream<Value> getAllWithKeys(Iterable<Key> keys);

  Future<Value> getWithKey(Key key);

  /// Inserts item to database under autogenerated key
  Future<Key> insertAuto(Value value);

  /// Inserts value with preset key
  Future<bool> insert(Value value);

  Future<bool> update(Value value);

  Future upsert(Value value);

  //// Delete item from data source with key
  Future<bool> delete(Key key);

  /// Deletes item from data source using item value
  Future<bool> deleteWithValue(Value value);

  /// Opens data source
  Future open();

  /// Closes data source
  Future close();

  /// Runs [transactionFunc] in transaction.
  Future<Result> transaction<Result>(
      Result Function(DataSource<Key, Value> storage) transactionFunc);
}
