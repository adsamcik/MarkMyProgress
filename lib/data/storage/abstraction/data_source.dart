import 'package:MarkMyProgress/data/storage/abstraction/storable.dart';
import 'package:MarkMyProgress/data/storage/abstraction/storage_subscribable.dart';

abstract class DataSource<Key, Value extends Storable<Key>> {
  /// True if data source is open
  bool get isOpen;

  /// Returns all records in data source
  Stream<Value> getAll();

  /// Returns all records that match keys from data source
  Stream<Value> getAllWithKeys(Iterable<Key> keys);

  /// Returns single record with key from data source
  Future<Value> getWithKey(Key key);

  /// Inserts item to database under autogenerated key
  Future<Key> insertAuto(Value value);

  /// Inserts value with preset key
  Future<bool> insert(Value value);

  /// Updates single record in data source.
  /// Returns true if item was updated.
  Future<bool> update(Value value);

  /// Updates single record in data source if it exists.
  /// If it does not exist, the record is inserted.
  Future<StorageEvent> upsert(Value value);

  //// Delete item from data source with key
  Future<bool> delete(Key key);

  /// Deletes item from data source using item value
  Future<bool> deleteWithValue(Value value);

  /// Opens data source
  Future open();

  /// Closes data source
  Future close();

  /// Runs [transactionFunc] in transaction.
  Future<Result> transaction<Result>(Result Function(DataSource<Key, Value> storage) transactionFunc);
}
